name: Generate and Commit Migrations

on:
  push:
    branches:
      - main  # 监听 main 分支的变更

jobs:
  generate-migrations:
    runs-on: ubuntu-latest

    steps:
    # 1. 检出代码
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: main-migrations
        fetch-depth: 0  # 拉取完整历史记录

    # 2. 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'  # 启用 pip 缓存以加快安装速度

    # 3. 安装依赖
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # 4. 切换到 main-migrations 分支并合并 main
    - name: Switch to migrations branch and merge main
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git config pull.rebase false  # 设置合并策略为 merge
        git pull origin main
        git push origin main-migrations
  
    # 5. 生成迁移文件并检查是否有变更
    - name: Generate migrations and check changes
      id: check_migrations
      run: |
        python manage.py makemigrations
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        # 使用 -f 强制添加被忽略的迁移文件
        git add -f */migrations/*.py
        # 检查是否有新的迁移文件变更
        if git diff --cached --quiet; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    # 6. 提交并推送迁移文件（仅当有变更时）
    - name: Commit and push migrations
      if: steps.check_migrations.outputs.has_changes == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git commit -m "Auto-generated migrations [skip ci]"
        git push origin main-migrations
